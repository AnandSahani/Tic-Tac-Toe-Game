<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe Game</title>
  <!-- Importing Google Font (Roboto) -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Roboto', sans-serif; /* Apply the Roboto font */
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #FFEB3B; /* Yellow background */
    }
    /* Menu Bar */
    .menu-bar {
      width: 100%;
      background-color: #333;
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
      font-size: 1.2em;
      font-weight: bold;
    }
    .menu-bar a {
      color: white;
      text-decoration: none;
      padding: 10px 20px;
      border-radius: 5px;
      transition: background-color 0.3s;
    }
    .menu-bar a:hover {
      background-color: #555;
    }
    .game-container {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      border: 2px solid #333;
      border-radius: 10px;
      padding: 20px;
      background-color: #fff;
      margin-top: 20px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }
    .cell {
      width: 100px;
      height: 100px;
      background-color: #f0f0f0;
      border: 2px solid #333;
      font-size: 2.5em;
      font-weight: bold;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .cell:hover {
      background-color: #e0e0e0;
    }
    .message {
      margin-top: 20px;
      font-size: 1.4em;
      font-weight: bold;
      text-align: center;
      color: #333;
    }
    .button {
      margin-top: 20px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1em;
      font-weight: bold;
    }
    .button:hover {
      background-color: #45a049;
    }
    .button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }
  </style>
</head>
<body>

  <!-- Menu Bar -->
  <div class="menu-bar">
    <span>Tic Tac Toe Game</span>
    <div>
      <a href="#" id="newGame">New Game</a>
      <a href="#" id="restartGame" style="display:none;">Restart Game</a>
    </div>
  </div>

  <div class="game-container">
    <div class="grid" id="grid"></div>
    <div class="message" id="message"></div>
  </div>

  <script>
    let currentPlayer = 'X'; // Human is 'X', AI is 'O'
    let gameBoard = Array(9).fill(null);
    let gameOver = false;

    const grid = document.getElementById('grid');
    const message = document.getElementById('message');
    const newGameButton = document.getElementById('newGame');
    const restartButton = document.getElementById('restartGame');

    // Create the game grid dynamically
    function createGrid() {
      grid.innerHTML = ''; // Reset the grid
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.addEventListener('click', () => handleCellClick(i), { once: true });
        grid.appendChild(cell);
      }
    }

    // Handle a cell click by the player
    function handleCellClick(index) {
      if (gameBoard[index] !== null || gameOver) return;

      gameBoard[index] = currentPlayer;
      const cell = grid.children[index];
      cell.textContent = currentPlayer;
      
      if (checkWinner()) {
        gameOver = true;
        message.textContent = `${currentPlayer} Wins!`;
        restartButton.style.display = 'block';
      } else if (gameBoard.every(cell => cell !== null)) {
        gameOver = true;
        message.textContent = "It's a Draw!";
        restartButton.style.display = 'block';
      } else {
        // Switch to AI's turn if it's the AI's turn
        currentPlayer = 'O';
        message.textContent = `AI's Turn`;
        setTimeout(aiTurn, 500); // AI makes its move after a slight delay
      }
    }

    // AI Turn: Randomly choose an available empty cell
    function aiTurn() {
      const availableMoves = gameBoard.map((value, index) => value === null ? index : -1).filter(index => index !== -1);
      const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)];
      
      gameBoard[randomMove] = 'O';
      const cell = grid.children[randomMove];
      cell.textContent = 'O';

      if (checkWinner()) {
        gameOver = true;
        message.textContent = `AI Wins!`;
        restartButton.style.display = 'block';
      } else if (gameBoard.every(cell => cell !== null)) {
        gameOver = true;
        message.textContent = "It's a Draw!";
        restartButton.style.display = 'block';
      } else {
        // Switch to player's turn
        currentPlayer = 'X';
        message.textContent = `${currentPlayer}'s Turn`;
      }
    }

    // Check if there's a winner
    function checkWinner() {
      const winPatterns = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
      ];

      for (const pattern of winPatterns) {
        const [a, b, c] = pattern;
        if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
          return true;
        }
      }
      return false;
    }

    // Restart the game
    restartButton.addEventListener('click', () => {
      currentPlayer = 'X';
      gameBoard = Array(9).fill(null);
      gameOver = false;
      message.textContent = `${currentPlayer}'s Turn`;
      restartButton.style.display = 'none';
      createGrid();
    });

    // New Game Button
    newGameButton.addEventListener('click', () => {
      currentPlayer = 'X';
      gameBoard = Array(9).fill(null);
      gameOver = false;
      message.textContent = `${currentPlayer}'s Turn`;
      restartButton.style.display = 'none';
      createGrid();
    });

    // Initialize the game
    createGrid();
    message.textContent = `${currentPlayer}'s Turn`;
  </script>

</body>
</html>
